var points = []
var selectedPointSource = new ol.source.Vector({
    // empty vector
})
var chart
var speedbarchart
var hrbarchart

$( document ).ready(function() {
    var id = $("#map").data("id")
    var medlong = $("#map").data("medlong")
    var medlat = $("#map").data("medlat")

    $.ajax({
	url: "/json/"+id,
	dataType: 'json',
	async: true,
	success: function(data) {
	    points = data;
	    initMap(id,medlong,medlat);
	    initChart();
	}
    });
});


function initMap(id, medlong,medlat){
    var currentMousePos = { x: -1, y: -1 };
    $(document).mousemove(function(event) {
        currentMousePos.x = event.pageX;
        currentMousePos.y = event.pageY;
    });
    
    var openCycleMapLayer = new ol.layer.Tile({
	source: new ol.source.OSM({
            attributions: [
		'All maps Â© <a href="https://www.opencyclemap.org/">OpenCycleMap</a>',
		ol.source.OSM.ATTRIBUTION
            ],
            url: 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png'
	})
    });

    var style = {
	'Point': new ol.style.Style({
            image: new ol.style.Circle({
		fill: new ol.style.Fill({
		    color: 'rgba(255,255,0,0.4)'
		}),
		radius: 1,
		stroke: new ol.style.Stroke({
		    color: '#ff0',
		    width: 1
		})
            })
	}),
	'LineString': new ol.style.Style({
            stroke: new ol.style.Stroke({
		color: '#f00',
		width: 5
            })
	}),
	'MultiLineString': new ol.style.Style({
            stroke: new ol.style.Stroke({
		color: 'rgba(0,0,0,0.7)',
		width: 6
            })
	})
    };

    var vector = new ol.layer.Vector({
	source: new ol.source.Vector({
            url: '/gpx/'+id,
            format: new ol.format.GPX()
	}),
	style: function(feature) {
            return style[feature.getGeometry().getType()];
	}
    });

    var selectedPointLayer = new ol.layer.Vector({
	source: selectedPointSource,
	style: function(feature) {
	    return new ol.style.Style({
		image: new ol.style.Circle({
		    fill: new ol.style.Fill({
			color: 'rgba(255,0,0,0.8)'
		    }),
		    radius: 5,
		    stroke: new ol.style.Stroke({
			color: '#ff0',
			width: 1
		    })
		})
	    });
	}
    });
    
    var pointFeatures = [];
    $.each( points, function( index, value ) {
	var pointFeat = new ol.Feature({
	    geometry: new ol.geom.Point(ol.proj.transform([value.long, value.lat], 'EPSG:4326', 'EPSG:3857')),
	    name: ""+value.time,
	    time: value.time,
	    speed: value.speed,
	    hr: value.hr
	});
	pointFeatures.push(pointFeat);
    });

    var pointSource = new ol.source.Vector({
	features : pointFeatures
    });
    
    var pointLayer = new ol.layer.Vector({
	source: pointSource,
	style: function(feature) {
            return style[feature.getGeometry().getType()];
	}
    });
    
    var center = ol.proj.transform([medlong, medlat], 'EPSG:4326', 'EPSG:3857');
    var map = new ol.Map({
	layers: [openCycleMapLayer, vector, pointLayer,selectedPointLayer],
	target: document.getElementById('map'),
	view: new ol.View({
            center: center,
            zoom: 12
	})
    });

    var displayFeatureInfo = function(pixel) {
	var features = [];
	map.forEachFeatureAtPixel(pixel, function(feature) {
             if (feature.getGeometry().getType() === 'Point') {
		 features.push(feature);
	     }
	});
	if (features.length > 0) {
            //document.getElementById('info').innerHTML = features[0].speed;
            map.getTarget().style.cursor = 'pointer';
	    
	    $("#hud").css( "display", "block" );
	    $("#hud").css( "top", currentMousePos.y+20 );
	    $("#hud").css( "left", currentMousePos.x+20 );
	    $("#hud").html(genHud(features[0]));
	    chart.select(['speed','hr'], [features[0].get('time')/5-1],true);
	} else {
	    $("#hud").css( "display", "none" )
            // document.getElementById('info').innerHTML = '&nbsp;';
            map.getTarget().style.cursor = '';
	}
    };

    map.on('pointermove', function(evt) {
	if (evt.dragging) {
            return;
	}
	var pixel = map.getEventPixel(evt.originalEvent);
	displayFeatureInfo(pixel);
    });

    map.on('click', function(evt) {
	displayFeatureInfo(evt.pixel);
    });
}

function genHud(feature){
    return("<ul>"+
	   "<li>Time : "+feature.get('time')+"</li>"+
	   "<li>Speed: "+feature.get('speed')+"</li>"+
	   "<li>Heart: "+feature.get('hr')+"</li>"+
	   "</ul>")
}

function initChart(){
    var time=["time"];
    var speed=["speed"];
    var hr=["hr"];
    var lat=["lat"];
    var lg=["long"];
    var maxspeed=0;
    var maxhr=0;
    var minhr=10000;
    
    $.each( points, function( index, value ) {
	time.push(value.time);
	speed.push(value.speed);
	hr.push(value.hr);
	lat.push(value.lat);
	lg.push(value.long);
	if(value.speed>maxspeed){
	    maxspeed = value.speed;
	}
	if(value.hr>maxhr){
	    maxhr = value.hr;
	}
	if(value.hr<minhr){
	    minhr = value.hr;
	}
    });
    var xhist= new Array(Math.ceil(maxspeed)).fill(0);
    var nbhist= new Array(Math.ceil(maxspeed)).fill(0);
    var hrhist= new Array(Math.ceil(maxhr-minhr)).fill(0);
    var nbhrhist= new Array(Math.ceil(maxhr-minhr)).fill(0);

    $.each( points, function( index, value ) {
	xhist[Math.floor(value.speed)]= Math.floor(value.speed);
	nbhist[Math.floor(value.speed)]+=1
	hrhist[Math.floor(value.hr-minhr)]= Math.floor(value.hr)
	nbhrhist[Math.floor(value.hr-minhr)]+=1
    });
    xhist.unshift("speed")
    nbhist.unshift("nb")
    hrhist.unshift("hr")
    nbhrhist.unshift("nb")
    
    chart = c3.generate({
	size: {
            height: 180,
	},
	data: {
	    x: "time",
            columns: [
		time,
		speed,
		hr,
            ],
            types: {
		speed : 'area',
		hr: 'area-spline'
            },
	    axes: {
		speed: 'y',
		hr: 'y2'
            },
	    onmouseover: function (d) {
		var latit=lat[d.index+1];
		var longi=lg[d.index+1];
		selectedPointSource.clear();
                selectedPointSource.addFeature(new ol.Feature({
		    geometry: new ol.geom.Point(ol.proj.transform([longi, latit], 'EPSG:4326', 'EPSG:3857')),
		    name: ""+d.x,
		    time: d.x,
		    speed: speed[d.index+1],
		    hr: hr[d.index+1]
		}));
	    },
	    selection: {
		enabled: true
	    },
	    colors: {
		'speed': function (d) {
		    return d.index === 3 ? "#d00" : "#ddd";
		}
		'':
	    }
	},
	axis: {
            y2: {
		show: true
            }
	},
    });
    console.log("coucou");
    console.log(nbhist);
    speedbarchart = c3.generate({
	size: {
            height: 180,
	},
	bindto: '#speedbarchart',
	data: {
	    columns: [
		nbhist
	    ],
	    type: 'bar'
	}
    });
    hrbarchart = c3.generate({
	size: {
            height: 180,
	},
	bindto: '#hrbarchart',
	data: {
	    x:"hr",
	    columns: [
		hrhist,
		nbhrhist
	    ],
	    type: 'bar'
	},
	axis: {
	    x:{
		min: minhr,
		max: maxhr
	    }
	}
    });
}
